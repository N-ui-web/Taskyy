app Tasky {
  wasp: {
    version: "^0.11.1"
  },
  title: "Tasky",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
        id Int @id @default(autoincrement())
        username String @unique
        password String
        tasks Task[]
psl=}

entity Task {=psl
        id Int @id @default(autoincrement())
        title String
        description String
        image String?
        status String @default("not completed")
        user User @relation(name:"TaskOwnership", fields: [userId], references: [id])
        userId Int
        sharedWith User[] @relation(name:"TaskSharing")
psl=}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@server/actions.js",
  entities: [Task]
}

action editTask {
  fn: import { editTask } from "@server/actions.js",
  entities: [Task]
}

action shareTask {
  fn: import { shareTask } from "@server/actions.js",
  entities: [Task, User]
}

query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

query getTask {
  fn: import { getTask } from "@server/queries.js",
  entities: [Task]
}

route TasksRoute { path: "/", to: TasksPage }
page TasksPage {
  component: import { Tasks } from "@client/pages/Tasks.jsx",
  authRequired: true
}

route AboutRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import { About } from "@client/About.jsx",
  authRequired: false
}